/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  bio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
  publishedAt?: string;
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  } | {
    _key: string;
  } & Code>;
  excerpt?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  _type: "image";
  _key: string;
} | {
  _key: string;
} & Code>;

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Author | Post | Category | BlockContent | Code | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/lib/queries.ts
// Variable: GET_ALL_CATEGORIES
// Query: *[_type == "category"] | order(title asc) {  _id,  title,  "slug": slug.current,  description,}
export type GET_ALL_CATEGORIESResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  description: string | null;
}>;
// Variable: POSTS_BY_ALL_CATEGORIES
// Query: *[  _type=="post" &&  count(categories[@->slug.current in $slugs]) == count($slugs)]| order(publishedAt desc){  _id, title, "slug": slug.current, publishedAt,  "excerpt": select(    defined(excerpt) && excerpt != "" => excerpt,    defined(body) => pt::text(body)[0...180],    ""  ),  mainImage{ "url": asset->url, "dims": asset->metadata.dimensions },  categories[]->{ title, "slug": slug.current }}
export type POSTS_BY_ALL_CATEGORIESResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  publishedAt: string | null;
  excerpt: string | null | "";
  mainImage: {
    url: string | null;
    dims: SanityImageDimensions | null;
  } | null;
  categories: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
}>;
// Variable: POSTS_BY_ANY_CATEGORY
// Query: *[  _type=="post" &&  count(categories[@->slug.current in $slugs]) > 0]| order(publishedAt desc){  _id, title, "slug": slug.current,  mainImage{ "url": asset->url, "dims": asset->metadata.dimensions },  publishedAt,  "excerpt": select(defined(excerpt) && excerpt != "" => excerpt, defined(body) => pt::text(body)[0...180], ""),  categories[]->{ title, "slug": slug.current }}
export type POSTS_BY_ANY_CATEGORYResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  mainImage: {
    url: string | null;
    dims: SanityImageDimensions | null;
  } | null;
  publishedAt: string | null;
  excerpt: string | null | "";
  categories: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
}>;
// Variable: POSTS_QUERY
// Query: *[_type == "post" && defined(slug.current)]| order(publishedAt desc)[0...12]{  _id,  title,  "slug": slug.current,  mainImage{    ...,    "url": asset->url,    "dims": asset->metadata.dimensions  },  publishedAt,  categories[]->{ title, "slug": slug.current }}
export type POSTS_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: string | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    url: string | null;
    dims: SanityImageDimensions | null;
  } | null;
  publishedAt: string | null;
  categories: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
}>;
// Variable: POST_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{  _id,  title,  "slug": slug.current,  body,                               mainImage{    ...,    "url": asset->url,    "dims": asset->metadata.dimensions  },  "excerpt": select(defined(excerpt) && excerpt != "" => excerpt, defined(body) => pt::text(body)[0...180], ""),  publishedAt,  categories[]->{ title, "slug": slug.current }}
export type POST_QUERYResult = {
  _id: string;
  title: string | null;
  slug: string | null;
  body: Array<{
    _key: string;
  } & Code | {
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }> | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    url: string | null;
    dims: SanityImageDimensions | null;
  } | null;
  excerpt: string | null | "";
  publishedAt: string | null;
  categories: Array<{
    title: string | null;
    slug: string | null;
  }> | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n*[_type == \"category\"] | order(title asc) {\n  _id,\n  title,\n  \"slug\": slug.current,\n  description,\n}\n": GET_ALL_CATEGORIESResult;
    "\n*[\n  _type==\"post\" &&\n  count(categories[@->slug.current in $slugs]) == count($slugs)\n]\n| order(publishedAt desc){\n  _id, title, \"slug\": slug.current, publishedAt,\n  \"excerpt\": select(\n    defined(excerpt) && excerpt != \"\" => excerpt,\n    defined(body) => pt::text(body)[0...180],\n    \"\"\n  ),\n  mainImage{ \"url\": asset->url, \"dims\": asset->metadata.dimensions },\n  categories[]->{ title, \"slug\": slug.current }\n}\n": POSTS_BY_ALL_CATEGORIESResult;
    "\n*[\n  _type==\"post\" &&\n  count(categories[@->slug.current in $slugs]) > 0\n]\n| order(publishedAt desc){\n  _id, title, \"slug\": slug.current,\n  mainImage{ \"url\": asset->url, \"dims\": asset->metadata.dimensions },\n  publishedAt,\n  \"excerpt\": select(defined(excerpt) && excerpt != \"\" => excerpt, defined(body) => pt::text(body)[0...180], \"\"),\n  categories[]->{ title, \"slug\": slug.current }\n}\n": POSTS_BY_ANY_CATEGORYResult;
    "*[_type == \"post\" && defined(slug.current)]\n| order(publishedAt desc)[0...12]{\n  _id,\n  title,\n  \"slug\": slug.current,\n  mainImage{\n    ...,\n    \"url\": asset->url,\n    \"dims\": asset->metadata.dimensions\n  },\n  publishedAt,\n  categories[]->{ title, \"slug\": slug.current }\n}": POSTS_QUERYResult;
    "\n*[_type == \"post\" && slug.current == $slug][0]{\n  _id,\n  title,\n  \"slug\": slug.current,\n  body,                             \n  mainImage{\n    ...,\n    \"url\": asset->url,\n    \"dims\": asset->metadata.dimensions\n  },\n  \"excerpt\": select(defined(excerpt) && excerpt != \"\" => excerpt, defined(body) => pt::text(body)[0...180], \"\"),\n  publishedAt,\n  categories[]->{ title, \"slug\": slug.current }\n}\n": POST_QUERYResult;
  }
}
